let log4js = require('log4js');

function Log(opts) {
    opts = opts || {};
    opts.log = opts.log || 'log';
    if (!opts.log.endsWith('/')) opts.log += '/';
    log4js.configure({
        appenders: {
            console: {
                type: 'console',
                layout: {
                    type: 'pattern',
                    "pattern": "%[[%d{yyyy-MM-dd hh:mm:ss.SSS}] [%p] -%] %m",
                    //"pattern": "[%x{date}] [%p] - %m",
                    // "tokens": {
                    //     "date": function (loggingEvent, s) {
                    //         return util.formatDate(loggingEvent.startTime, 'YYYY-MM-DD HH:mm:ss.SSS');
                    //     }
                    // }
                }
            },
            default: {
                type: 'dateFile',
                filename: opts.log, pattern: "yyyy-MM-dd.log",
                alwaysIncludePattern: true,
                layout: {
                    type: 'pattern',
                    "pattern": "[%d{yyyy-MM-dd hh:mm:ss.SSS}] [%p] - %m",
                    //"pattern": "[%x{date}] [%p] - %m",
                    // "tokens": {
                    //     "date": function (loggingEvent, s) {
                    //         return util.formatDate(loggingEvent.startTime, 'YYYY-MM-DD HH:mm:ss.SSS');
                    //     }
                    // }
                }
            }
        },
        categories: {
            console: { appenders: ['console', 'default'], level: 'trace' },
            default: { appenders: ['default'], level: 'trace' },
        }
    });
    let log = log4js.getLogger('console');

    console.log = function () {
        if (isError(arguments)) {
            log.error(...arguments)
        } else {
            log.info(...arguments)
        }
    }

    let arr = ['info', 'warn', 'debug', 'error', 'fatal', 'trace'];
    for (let key of arr) {
        console[key] = function () {
            log[key](...arguments);
        }
    }
}

function isError(args) {
    for (let arg of args) {
        if (arg instanceof Error) return true;
    }
    return false;
}

module.exports = Log;